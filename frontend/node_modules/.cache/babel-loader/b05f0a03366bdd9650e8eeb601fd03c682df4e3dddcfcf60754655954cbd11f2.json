{"ast":null,"code":"var _jsxFileName = \"/Users/bhavyadeepsharma/Downloads/12-adv-starting-project/frontend/src/pages/Events.js\",\n  _s = $RefreshSig$();\nimport EventsList from '../components/EventsList';\nimport { Await, defer, json, useLoaderData } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const {\n    events\n  } = useLoaderData();\n  return /*#__PURE__*/_jsxDEV(Await, {\n    resolve: events\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 10\n  }, this);\n}\n_s(EventsPage, \"22Av1LduzrZxSsk8kXUUCix36lQ=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvents() {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    // return {isError: true, message:'Could not fetch events.'};\n    //   throw new Response(JSON.stringify({ message: 'Could not fetch events.'}), \n    //   {status : 500}\n    // )\n    return json({\n      message: 'Could not fetch events.'\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nexport function loader() {\n  return defer({\n    events: loadEvents()\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["EventsList","Await","defer","json","useLoaderData","jsxDEV","_jsxDEV","EventsPage","_s","events","resolve","fileName","_jsxFileName","lineNumber","columnNumber","_c","loadEvents","response","fetch","ok","message","status","loader","$RefreshReg$"],"sources":["/Users/bhavyadeepsharma/Downloads/12-adv-starting-project/frontend/src/pages/Events.js"],"sourcesContent":["import EventsList from '../components/EventsList';\nimport { Await, defer, json, useLoaderData } from 'react-router-dom';\n\nfunction EventsPage() {\n  const {events}=useLoaderData();\n\n  return <Await resolve={events}>\n    \n  </Await>\n}\n\nexport default EventsPage;\n\n\nasync function loadEvents(){\n  const response = await fetch('http://localhost:8080/events');\n\n  if (!response.ok) {\n    // return {isError: true, message:'Could not fetch events.'};\n  //   throw new Response(JSON.stringify({ message: 'Could not fetch events.'}), \n  //   {status : 500}\n  // )\n  return json({message: 'Could not fetch events.'},\n    {status: 500}\n  )\n  } else {\n    return response;\n  }\n}\n\nexport function loader(){\n  return defer({\n    events: loadEvents()\n  })\n  \n}"],"mappings":";;AAAA,OAAOA,UAAU,MAAM,0BAA0B;AACjD,SAASC,KAAK,EAAEC,KAAK,EAAEC,IAAI,EAAEC,aAAa,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErE,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM;IAACC;EAAM,CAAC,GAACL,aAAa,CAAC,CAAC;EAE9B,oBAAOE,OAAA,CAACL,KAAK;IAACS,OAAO,EAAED;EAAO;IAAAE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEvB,CAAC;AACV;AAACN,EAAA,CANQD,UAAU;EAAA,QACFH,aAAa;AAAA;AAAAW,EAAA,GADrBR,UAAU;AAQnB,eAAeA,UAAU;AAGzB,eAAeS,UAAUA,CAAA,EAAE;EACzB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACF;IACA;IACA;IACA,OAAOhB,IAAI,CAAC;MAACiB,OAAO,EAAE;IAAyB,CAAC,EAC9C;MAACC,MAAM,EAAE;IAAG,CACd,CAAC;EACD,CAAC,MAAM;IACL,OAAOJ,QAAQ;EACjB;AACF;AAEA,OAAO,SAASK,MAAMA,CAAA,EAAE;EACtB,OAAOpB,KAAK,CAAC;IACXO,MAAM,EAAEO,UAAU,CAAC;EACrB,CAAC,CAAC;AAEJ;AAAC,IAAAD,EAAA;AAAAQ,YAAA,CAAAR,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}